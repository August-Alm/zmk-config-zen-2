#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h> 

#define DEFAULT 0
#define NAV     1
#define SYM     2
#define FUN     3
#define NUM     4

&mt {
        tapping-term-ms = <200>;
};

#define MACRO(name, keys)                 \
name: name##_macro {                      \
	label = #name;                    \
	compatible = "zmk,behavior-macro";\
	#binding-cells = <0>;             \
	tap-ms = <40>;                    \
	wait-ms = <42>;                   \
	bindings = <keys>;                \
};

/ {
	macros {
		MACRO(vim_s,  &kp LS(DOT) &kp LS(N5) &kp S &kp LS(N7))
		MACRO(vim_q,  &kp LS(DOT) &kp Q)
		MACRO(vim_w,  &kp LS(DOT) &kp W)
		MACRO(vim_u,  &kp LS(DOT) &kp U)
		MACRO(vim_pu, &kp LS(DOT) &kp P &kp U)
	};
};

/ {
        chosen {
                zmk,matrix_transform = &default_transform;
        };
};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "DAKTYL";
// -----------------------------------------------------------------------------------------
// |   ¨  |  Q  |  Y  |  O  |  U  |  ´  |   |  V  |  D   |  G  |  J  |  X  |  §   |
// |   -  |  C  |  I  |  E  |  A  |  ,  |   |  K  |  T   |  S  |  R  |  L  |  -   |
// |   "  |  W  |  Å  |  Ö  |  Ä  |  .  |   |  P  |  B   |  F  |  M  |  Z  | NUM  |
//                    | NAV | SPC | NAV |   | SYM |  N   |  H |
                        bindings = <
   &kp RBKT   &kp Q      &kp Y       &kp O      &kp U       &kp EQUAL   &kp V   &kp D       &kp G      &kp J       &kp X      &kp RA(S) //0x00A7
   &kp FSLH   &mt LALT C &mt LCTRL I &mt LCMD E &mt LSHFT A &kp COMMA   &kp K   &mt RSHFT T &mt RCMD S &mt RCTRL R &mt LALT L &kp BSLH
   &kp LS(N2) &kp W      &kp LBKT    &kp SEMI   &kp SQT     &kp DOT     &kp P   &kp B       &kp F      &kp M       &kp Z      &tog NUM
                                     &tog NAV   &kp SPACE   &mo NAV     &mo SYM &kp N       &mt RALT H
                        >;
                };

               nav_layer {
                        label = "NAV";
// -----------------------------------------------------------------------------------------
// | BTCLR | BT0  | BT1  | BT2  | BT3  | BT4  |     | DEL | BKSP | ESC | INS | none | PWR  |
// | none  | OPT  | CTL  | CMD  | SHFT | none |     | LFT | DWN  | UP  | RGT | CAPS | none |
// | none  | srch | :Q   | :W   | :U   | :PU  |     | HOM | PGD  | PGU | END | none | none |
//                       |      |      |      |     | FUN | RET  | TAB |
                        bindings = <
   &bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4  &kp DEL  &kp BSPC  &kp ESC   &kp INS   &none    &kp C_PWR
   &none       &kp LALT     &kp LCTL     &kp LCMD     &kp LSHFT    &none         &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &kp CAPS &none
   &none       &vim_s       &vim_q       &vim_w       &vim_u       &vim_pu       &kp HOME &kp PG_DN &kp PD_UP &kp END   &none    &none
                          	         &trans       &trans       &trans        &mo FUN  &kp RET   &kp TAB
                        >;
                };

                sym_layer {
                        label = "SYM";
// -----------------------------------------------------------------------------------------
// | none |  £  |  [  |  (  |  {  |  ;  |     |  :  |  }  |  )  |  ]  |  ¥  | none |
// | none |  @  |  !  |  ?  |  *  |  /  |     |  \  |  =  |  +  |  -  |  #  | none |
// | none |  $  |  <  |  |  |  >  |  `  |     |  ^  |  %  |  &  |  ~  |  €  | none |
//                    |none | _   | FUN |     |     |     |     |
                        bindings = <
   &none &kp LA(N3) &kp LA(N8) &kp LS(N8)    &kp LA(LS(N8)) &kp LS(COMMA)   &kp LS(DOT)    &kp LA(LS(N9)) &kp LS(N9) &kp LA(N9)    &kp LA(LS(N3)) &none
   &none &kp LA(N2) &kp LS(N1) &kp LS(MINUS) &kp LS(BSLH)   &kp LS(N7)      &kp LA(LS(N7)) &kp LS(N0)     &kp MINUS  &kp FSLH      &kp LS(N3)     &none
   &none &kp LA(N4) &kp GRAVE  &kp LA(N7)    &kp LS(GRAVE)  &kp LS(EQUAL)   &kp LS(RBKT)   &kp LS(N5)     &kp LS(N6) &kp LA(RBKT)  &kp LS(N4)     &none
                               &trans        &kp LS(FSLH)   &mo FUN         &trans         &trans         &trans
                        >;
                };

                fun_layer {
                        label = "FUN";
// -----------------------------------------------------------------------------------------
// | none | none|  G  |  b  |  w  |  e  |   |  h  |  i  |  j  |  k  | none| none |
// | none |  7  |  3  |  1  |  5  |  9  |   |  8  |  4  |  0  |  2  |  6  | none |
// | f11  | f7  | f3  | f1  | f5  | f9  |   | f8  | f4  | f0  | f2  | f6  | f12  |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &none   &none  &kp LS(G) &kp B   &kp W   &kp E      &kp H   &kp I   &kp J   &kp K  &none  &none
   &none   &kp N7 &kp N3    &kp N1  &kp N5  &kp N9     &kp N8  &kp N4  &kp N0  &kp N2 &kp N6 &none
   &kp F11 &kp F7 &kp F3    &kp F1  &kp F5  &kp F9     &kp F8  &kp F4  &kp F0  &kp F2 &kp F6 &kp F12
                    	    &trans  &trans  &trans     &trans  &trans  &trans
                        >;
                };

                num_layer {
                        label = "NUM";
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  /  |  7  |  8  |  9  |  -  | BKSP |
// | SHFT |  A  |  S  |  D  |  F  |  G  |   |  *  |  4  |  5  |  6  |  +  | TAB  |
// | CTRL |  Z  |  X  |  C  |  V  |  B  |   |  =  |  1  |  2  |  3  |  ,  |      |
//                    | GUI | ALT | SPC |   | ENT |  0  |  .  |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp KP_SLASH    &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_MINUS &kp BSPC
   &kp LSHFT &kp A &kp S &kp D &kp F &kp G   &kp KP_MULTIPLY &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_PLUS  &kp TAB
   &kp LCTRL &kp Z &kp X &kp C &kp V &kp B   &kp UNDER       &kp KP_N3 &kp KP_N2 &kp KP_N3 &kp KP_COMMA &trans
              &kp LGUI  &kp LALT &kp SPACE   &kp RET         &kp KP_N0 &kp KP_DOT
                        >;
                };
        };
};